From 2c51c85d5c73b2217013a291cc80620e0b1ed268 Mon Sep 17 00:00:00 2001
From: Wim Taymans <wtaymans@redhat.com>
Date: Fri, 27 Jan 2017 16:43:11 +0100
Subject: [PATCH 13/18] core: add current_client

Add the current client to the core object and configure it in the
various protocols whenever we start executing code for a pa_client.
---
 src/pulsecore/cli.c             |  5 +++++
 src/pulsecore/core-struct.h     |  2 ++
 src/pulsecore/core-subscribe.c  |  4 ++++
 src/pulsecore/core.c            | 10 ++++++++++
 src/pulsecore/core.h            |  3 +++
 src/pulsecore/protocol-dbus.c   |  5 +++++
 src/pulsecore/protocol-esound.c |  4 ++++
 src/pulsecore/protocol-http.c   |  4 ++++
 src/pulsecore/protocol-native.c |  3 +++
 src/pulsecore/protocol-simple.c |  2 ++
 10 files changed, 42 insertions(+)

diff --git a/src/pulsecore/cli.c b/src/pulsecore/cli.c
index f942629..0546b06 100644
--- a/src/pulsecore/cli.c
+++ b/src/pulsecore/cli.c
@@ -134,6 +134,8 @@ static void line_callback(pa_ioline *line, const char *s, void *userdata) {
         return;
     }
 
+    pa_core_set_current_client(c->core, c->client);
+
     /* Magic command, like they had in AT Hayes Modems! Those were the good days! */
     if (pa_streq(s, "/"))
         s = c->last_line;
@@ -151,10 +153,13 @@ static void line_callback(pa_ioline *line, const char *s, void *userdata) {
     }
     else
         pa_cli_command_execute_line(c->core, s, buf, &c->fail);
+
     c->defer_kill--;
     pa_ioline_puts(line, p = pa_strbuf_to_string_free(buf));
     pa_xfree(p);
 
+    pa_core_set_current_client(c->core, NULL);
+
     if (c->kill_requested) {
         if (c->eof_callback)
             c->eof_callback(c, c->userdata);
diff --git a/src/pulsecore/core-struct.h b/src/pulsecore/core-struct.h
index e6aa374..8d58f1a 100644
--- a/src/pulsecore/core-struct.h
+++ b/src/pulsecore/core-struct.h
@@ -98,6 +98,8 @@ struct pa_core {
     pa_hook hooks[PA_CORE_HOOK_MAX];
     /* access hooks */
     pa_hook access[PA_ACCESS_HOOK_MAX];
+
+    pa_client *current_client;
 };
 
 #endif /* foocorestructhfoo */
diff --git a/src/pulsecore/core-subscribe.c b/src/pulsecore/core-subscribe.c
index e60af21..a3f7ec7 100644
--- a/src/pulsecore/core-subscribe.c
+++ b/src/pulsecore/core-subscribe.c
@@ -40,6 +40,7 @@
 
 struct pa_subscription {
     pa_core *core;
+    pa_client *client;
     bool dead;
 
     pa_subscription_cb_t callback;
@@ -70,6 +71,7 @@ pa_subscription* pa_subscription_new(pa_core *c, pa_subscription_mask_t m, pa_su
 
     s = pa_xnew(pa_subscription, 1);
     s->core = c;
+    s->client = pa_core_get_current_client(c);
     s->dead = false;
     s->callback = callback;
     s->userdata = userdata;
@@ -170,8 +172,10 @@ static void defer_cb(pa_mainloop_api *m, pa_defer_event *de, void *userdata) {
         for (s = c->subscriptions; s; s = s->next) {
 
             if (!s->dead && pa_subscription_match_flags(s->mask, e->type)) {
+                pa_core_set_current_client(c, s->client);
                 if (pa_core_check_access_sync(c, PA_ACCESS_HOOK_FILTER_SUBSCRIBE_EVENT, e->index, e->type, NULL))
                   s->callback(c, e->type, e->index, s->userdata);
+                pa_core_set_current_client(c, NULL);
             }
         }
 
diff --git a/src/pulsecore/core.c b/src/pulsecore/core.c
index 6b9fb8b..311d31f 100644
--- a/src/pulsecore/core.c
+++ b/src/pulsecore/core.c
@@ -154,6 +154,8 @@ pa_core* pa_core_new(pa_mainloop_api *m, bool shared, bool enable_memfd, size_t
     for (j = 0; j < PA_ACCESS_HOOK_MAX; j++)
         pa_hook_init(&c->access[j], c);
 
+    c->current_client = NULL;
+
     pa_random(&c->cookie, sizeof(c->cookie));
 
 #ifdef SIGPIPE
@@ -332,6 +334,14 @@ pa_mempool* pa_core_new_mempool(pa_core *c, pa_mem_type_t shm_type, bool per_cli
     return pa_mempool_new(shm_type, c->shm_size, per_client);
 }
 
+pa_client* pa_core_get_current_client(pa_core *c) {
+    return c->current_client;
+}
+
+void pa_core_set_current_client(pa_core *c, pa_client *client) {
+  c->current_client = client;
+}
+
 bool pa_core_check_access_sync(pa_core *c, pa_access_hook_t hook, uint32_t idx, pa_subscription_event_type_t event, const char *name) {
     pa_access_data data;
 
diff --git a/src/pulsecore/core.h b/src/pulsecore/core.h
index 316a88e..42d1e11 100644
--- a/src/pulsecore/core.h
+++ b/src/pulsecore/core.h
@@ -168,6 +168,9 @@ pa_mainloop_api* pa_core_get_mainloop(pa_core *c);
 pa_mempool* pa_core_get_mempool(pa_core *c);
 pa_mempool* pa_core_new_mempool(pa_core *c, pa_mem_type_t shm_type, bool per_client);
 
+pa_client* pa_core_get_current_client(pa_core *c);
+void pa_core_set_current_client(pa_core *c, pa_client *client);
+
 pa_idxset* pa_core_get_modules(pa_core *c);
 pa_idxset* pa_core_get_clients(pa_core *c);
 pa_idxset* pa_core_get_cards(pa_core *c);
diff --git a/src/pulsecore/protocol-dbus.c b/src/pulsecore/protocol-dbus.c
index 59afc1a..2ab0602 100644
--- a/src/pulsecore/protocol-dbus.c
+++ b/src/pulsecore/protocol-dbus.c
@@ -494,6 +494,7 @@ static enum find_result_t find_handler(struct call_info *call_info) {
 static DBusHandlerResult handle_message_cb(DBusConnection *connection, DBusMessage *message, void *user_data) {
     pa_dbus_protocol *p = user_data;
     struct call_info call_info;
+    pa_client *client;
 
     pa_assert(connection);
     pa_assert(message);
@@ -520,6 +521,9 @@ static DBusHandlerResult handle_message_cb(DBusConnection *connection, DBusMessa
         goto finish;
     }
 
+    client = pa_dbus_protocol_get_client(p, connection);
+    pa_core_set_current_client(p->core, client);
+
     switch (find_handler(&call_info)) {
         case FOUND_GET_PROPERTY:
             call_info.property_handler->get_cb(connection, message, call_info.iface_entry->userdata);
@@ -586,6 +590,7 @@ static DBusHandlerResult handle_message_cb(DBusConnection *connection, DBusMessa
         default:
             pa_assert_not_reached();
     }
+    pa_core_set_current_client(p->core, NULL);
 
 finish:
     return DBUS_HANDLER_RESULT_HANDLED;
diff --git a/src/pulsecore/protocol-esound.c b/src/pulsecore/protocol-esound.c
index 0d76525..706a21f 100644
--- a/src/pulsecore/protocol-esound.c
+++ b/src/pulsecore/protocol-esound.c
@@ -1284,7 +1284,9 @@ static void io_callback(pa_iochannel*io, void *userdata) {
     connection_assert_ref(c);
     pa_assert(io);
 
+    pa_core_set_current_client(c->protocol->core, c->client);
     do_work(c);
+    pa_core_set_current_client(c->protocol->core, NULL);
 }
 
 static void defer_callback(pa_mainloop_api*a, pa_defer_event *e, void *userdata) {
@@ -1293,7 +1295,9 @@ static void defer_callback(pa_mainloop_api*a, pa_defer_event *e, void *userdata)
     connection_assert_ref(c);
     pa_assert(e);
 
+    pa_core_set_current_client(c->protocol->core, c->client);
     do_work(c);
+    pa_core_set_current_client(c->protocol->core, NULL);
 }
 
 static int connection_process_msg(pa_msgobject *o, int code, void*userdata, int64_t offset, pa_memchunk *chunk) {
diff --git a/src/pulsecore/protocol-http.c b/src/pulsecore/protocol-http.c
index 64024df..6fbd553 100644
--- a/src/pulsecore/protocol-http.c
+++ b/src/pulsecore/protocol-http.c
@@ -647,6 +647,8 @@ static void line_callback(pa_ioline *line, const char *s, void *userdata) {
         return;
     }
 
+    pa_core_set_current_client(c->protocol->core, c->client);
+
     switch (c->state) {
         case STATE_REQUEST_LINE: {
             if (pa_startswith(s, "GET ")) {
@@ -680,11 +682,13 @@ static void line_callback(pa_ioline *line, const char *s, void *userdata) {
         default:
             ;
     }
+    pa_core_set_current_client(c->protocol->core, NULL);
 
     return;
 
 fail:
     html_response(c, 500, "Internal Server Error", NULL);
+    pa_core_set_current_client(c->protocol->core, NULL);
 }
 
 void pa_http_protocol_connect(pa_http_protocol *p, pa_iochannel *io, pa_module *m) {
diff --git a/src/pulsecore/protocol-native.c b/src/pulsecore/protocol-native.c
index a866802..728c7e7 100644
--- a/src/pulsecore/protocol-native.c
+++ b/src/pulsecore/protocol-native.c
@@ -5051,10 +5051,13 @@ static void pstream_packet_callback(pa_pstream *p, pa_packet *packet, pa_cmsg_an
     pa_assert(packet);
     pa_native_connection_assert_ref(c);
 
+    pa_core_set_current_client(c->protocol->core, c->client);
+
     if (pa_pdispatch_run(c->pdispatch, packet, ancil_data, c) < 0) {
         pa_log("invalid packet.");
         native_connection_unlink(c);
     }
+    pa_core_set_current_client(c->protocol->core, NULL);
 }
 
 static void pstream_memblock_callback(pa_pstream *p, uint32_t channel, int64_t offset, pa_seek_mode_t seek, const pa_memchunk *chunk, void *userdata) {
diff --git a/src/pulsecore/protocol-simple.c b/src/pulsecore/protocol-simple.c
index e1ead2f..8d4fbe4 100644
--- a/src/pulsecore/protocol-simple.c
+++ b/src/pulsecore/protocol-simple.c
@@ -467,7 +467,9 @@ static void io_callback(pa_iochannel*io, void *userdata) {
     connection_assert_ref(c);
     pa_assert(io);
 
+    pa_core_set_current_client(c->protocol->core, c->client);
     do_work(c);
+    pa_core_set_current_client(c->protocol->core, NULL);
 }
 
 /*** socket_server callbacks ***/
-- 
2.9.3

